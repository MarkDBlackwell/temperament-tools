#!/usr/bin/env -S ruby -w

def blob_complete(blob)
  digits_separator_digits = blob.match(digits_separator_digits_regexp).to_s
  return digits_separator_digits unless digits_separator_digits.empty?

  digits_dot = blob.match(digits_dot_regexp).to_s
  return digits_dot unless digits_dot.empty?

  digits_slash = blob.match(digits_slash_regexp).to_s
  return digits_slash.concat('1') unless digits_slash.empty?

  digits = blob.match(digits_regexp).to_s
  if digits.empty?
    digits
  else
    digits.concat('/1') 
  end
end

def blob_first(line)
  first = line.split(' ').push('').first
  characters = first.match(pitch_character_regexp).to_s
  blob_complete(characters)
end

def comment_indicator_regexp
  @comment_indicator_regexp ||= ::Regexp.new( /^\s*!/ )
end

def digits_dot_regexp
  @digits_dot_regexp ||= ::Regexp.new( /^-?[0-9]+\./ )
end

def digits_regexp
  @digits_regexp ||= ::Regexp.new( /^-?[0-9]+/ )
end

def digits_separator_digits_regexp
  @digits_separator_digits_regexp ||= ::Regexp.new( /^-?[0-9]+[\/\.][0-9]+/ )
end

def digits_slash_regexp
  @digits_slash_regexp ||= ::Regexp.new( /^-?[0-9]+\// )
end

def line_value(line)
# Process all these:
#    %w[  2    2/   2/3  2.   2.3  -2    -2/   -2/3  -2.   -2.3  2//3  2/.3  2..3  2./3  -2//3  -2/.3  -2..3  -2./3  2-3  2.-3  ]
# The result should be:
#    %w[  2/1  2/1  2/3  2.0  2.3  -2/1  -2/1  -2/3  -2.0  -2.3  2/1   2/1   2.0   2.0   -2/1   -2/1   -2.0   -2.0   2/1  2.0   ]

  blob = blob_first(line)
  return nil if blob.empty?
  return blob.to_f unless blob.match(digits_dot_regexp).to_s.empty?
#  a = blob.split('/').map{|e| e.to_f}
#  ratio = a.first / a.last
#  ::Math.log2(ratio) * 1200
   blob
end

def pitch_character_regexp
  @pitch_character_regexp ||= ::Regexp.new( /^[-0-9.\/]*/ )
end

def run
  header_length = 2
  position = 0
  readlines.each do |line|
# Echo comments and the header:
    is_comment = line.match(comment_indicator_regexp)
    position += 1 unless is_comment
    if is_comment || position <= header_length
      puts line
      next
    end
# For now, print the scale values:
    value = line_value(line)
    unless value
      puts line
    else
      puts " #{value}"
    end
  end
  nil
end

run
